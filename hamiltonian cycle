#include <stdio.h>
#include <stdbool.h>

#define MAX_VERTICES 20

int graph[MAX_VERTICES][MAX_VERTICES];
int num_vertices;
bool visited[MAX_VERTICES];
int path[MAX_VERTICES];

bool is_valid(int v, int pos) {
    if (!visited[v]) {
        
        if (pos == 0 || graph[path[pos - 1]][v])
            return true;
    }
    return false;
}

bool hamiltonian_circuit_util(int pos) {
    if (pos == num_vertices) {
        
        if (graph[path[pos - 1]][path[0]])
            return true;
        return false;
    }

    for (int v = 1; v < num_vertices; v++) {
        if (is_valid(v, pos)) {
            path[pos] = v;
            visited[v] = true;

            if (hamiltonian_circuit_util(pos + 1))
                return true;

            visited[v] = false;
        }
    }

    return false;
}

bool find_hamiltonian_circuit() {
    for (int i = 0; i < num_vertices; i++) {
        visited[i] = false;
    }

    path[0] = 0; 
    visited[0] = true;

    if (hamiltonian_circuit_util(1)) {
        printf("Hamiltonian Circuit: ");
        for (int i = 0; i < num_vertices; i++) {
            printf("%d ", path[i]);
        }
        printf("%d", path[0]); 
        printf("\n");
        return true;
    }

    printf("No Hamiltonian Circuit found.\n");
    return false;
}

int main() {
    
    num_vertices = 5;
    for (int i = 0; i < num_vertices; i++) {
        for (int j = 0; j < num_vertices; j++) {
            graph[i][j] = 0; 
        }
    }

    
    graph[0][1] = graph[1][0] = 1;
    graph[0][2] = graph[2][0] = 1;
    graph[0][3] = graph[3][0] = 1;
    graph[0][4] = graph[4][0] = 1;
    graph[1][2] = graph[2][1] = 1;
    graph[2][3] = graph[3][2] = 1;
    graph[3][4] = graph[4][3] = 1;

    find_hamiltonian_circuit();

    return 0;
}
